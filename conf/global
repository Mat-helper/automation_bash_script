#!/usr/bin/env bash

export DATE="$(/bin/date +%Y.%m.%d.%H.%M.%S)"

# For perl and run-time locale setting.
export LC_ALL=C
export LC_CTYPE=C
export LANG=C

# Tells ncurses (dialog) to use Unicode values which correspond to the VT100
# line-drawing glyphs.
export NCURSES_NO_UTF8_ACS=1

# Debug mode: YES, NO.
export SERVER_DEBUG="${SERVER_DEBUG:=NO}"

# Tools.
export CONFIG_VIA_DIALOG="${DIALOG_DIR}/config_via_dialog.sh"
# Note: config file will be sourced in file 'conf/core', function 'check_env()'.
export SERVER_CONFIG_FILE="${ROOTDIR}/config"
export TIP_FILE="${ROOTDIR}/server.tips"
export DB_TIP_FILE="${ROOTDIR}/DB_details.tips"
export Developer_TIP_FILE="${ROOTDIR}/For_developers.tips"
export STATUS_FILE="${RUNTIME_DIR}/install.status"
export INSTALL_LOG="${RUNTIME_DIR}/install.log"
export PKG_INSTALL_LOG="${RUNTIME_DIR}/pkg.install.log"
# Directory used to store kv files (one value in one file).
export SERVER_KV_DIR='/root/.server/kv'

# Output flag.
export _INFO_FLAG="[ INFO ]"
export _SKIP_FLAG="< SKIP >"
export _ERROR_FLAG="<< ERROR >>"
export _QUESTION_FLAG="< Question >"
export _BACKUP_FLAG=" + < Backup >"
export _DEBUG_FLAG=" + < DEBUG >"

export CONF_MSG="#
# File generated by linux administrator at maticz technologies:
#
# url: https://www.maticz.com
#
"

# Kernel name, in upper cases.
export KERNEL_NAME="$(uname -s | tr '[a-z]' '[A-Z]')"

# Command used to genrate a random string.
# Usage: str="$(${RANDOM_STRING})"
export RANDOM_STRING='eval </dev/urandom tr -dc A-Za-z | (head -c $1 &>/dev/null || head -c 6)' 
export RANDOM_NUMBER='shuf -i 49152-65535 -n 1'

# command: dialog.
export BIN_DIALOG="dialog"
export PKG_DIALOG="dialog"

# command: zip , unzip, curl.
export BIN_ZIP='zip'
export PKG_ZIP='zip'
export BIN_UNZIP='unzip'
export PKG_UNZIP='unzip'
export BIN_CURL='curl'
export PKG_CURL='curl'

# Shells
export SHELL_NOLOGIN='/sbin/nologin'
export SHELL_BASH='/bin/bash'

# Default password scheme for SQL backends.
# LDAP backend will use SSHA instead (defined in dialog/config_via_dialog.sh)
# for easier third-party application integrations.
export DEFAULT_PASSWORD_SCHEME='SSHA512'

# Check distribution.
#   - DISTRO
#   - DISTRO_VERSION
#   - DISTRO_CODENAME
#
# UNSUPPORTED_RELEASE will be set to 'YES' if current Linux/BSD release is
# an old release and unsupported anymore.
export UNSUPPORTED_RELEASE='NO'


# Detect distro name and release version.
if [ X"${KERNEL_NAME}" == X'LINUX' ]; then
    export DISTRO_VERSION=$(awk -F'"' '/^VERSION_ID=/ {print $2}' /etc/os-release)

    # Debian:
    #   - 11: bullseye
    # Ubuntu:
    #   - 18.04: Bionic Beaver
    #   - 20.04: focal
    #   - 22.04: jammy
    export DISTRO_CODENAME=$(awk -F'=' '/^VERSION_CODENAME=/ {print $2}' /etc/os-release)

    # Directory of RC scripts.
    export DIR_RC_SCRIPTS='/etc/init.d'

    if [ -f /etc/lsb-release ] && grep -i 'DISTRIB_ID=Ubuntu' /etc/lsb-release &>/dev/null; then
        # Ubuntu
        export DISTRO='UBUNTU'

        # Supported releases: 18.04, 20.04, 22.04.
        if echo "${DISTRO_VERSION}" | grep -E '^(16|17|19\.|21\.|20\.10)' &>/dev/null ; then
            export UNSUPPORTED_RELEASE='YES'
        fi
    else
        export UNSUPPORTED_RELEASE='YES'
    fi
else
    # Not support *BSD and other distrobutions yet.
    echo "Error: Your OS is not supported yet."
    exit 255
fi

# Exit and prompt to use a supported Linux/BSD distribution
if [ X"${UNSUPPORTED_RELEASE}" == X'YES' ]; then
    cat <<EOF
********* ERROR *********
Release version of the operating system on this server is unsupported by
iRedMail, please access below link to get the latest iRedMail and a list
of supported Linux/BSD distributions and release versions.

http://www.iredmail.org/download.html

*************************
EOF

    exit 255
fi

# root user/group name. Note: not all OSes have group 'root'.
export SYS_USER_ROOT='root'
export SYS_GROUP_ROOT='root'

# Check processor type.
if [ X"${DISTRO}" == X'DEBIAN' ]; then
    arch="$(uname -m)"
else
    arch="$(uname -p)"
fi
case $arch in
    i[3456]86) export OS_ARCH='i386' ;;
    x86_64|amd64) export OS_ARCH='x86_64' ;;
    *) export OS_ARCH="${arch}" ;;
esac


# install_pkg: function used to install packages without confirm.
# remove_pkg: function used to remove packages without confirm.
# LIST_ALL_PKGS: command used to list all installed packages.
# LIST_FILES_IN_PKG: command used to list files installed by special package.
  # Ubuntu & Debian.
    export DEBIAN_FRONTEND='noninteractive'
    export SHELL_NOLOGIN='/usr/sbin/nologin'

    # Package management.
    if [ X"${APTGET}" != X"" ]; then
        export APTGET="${APTGET}"
    else
        # "WARNING: apt does not have a stable CLI interface. Use with caution in scripts."
        export APTGET='apt-get'
    fi

    # Package management.
    export install_pkg='install_pkg_debian'
    export remove_pkg='remove_pkg_debian'
    export LIST_ALL_PKGS="dpkg -l |awk '{print $2}'"
    export LIST_FILES_IN_PKG='dpkg -L'

    # SSHD log file
    export SSHD_LOGFILE='/var/log/auth.log'

    # Crontab related.
    export CRON_SPOOL_DIR='/var/spool/cron/crontabs'

    # Directory /etc/default/ on Debian/Ubuntu.
    export ETC_SYSCONFIG_DIR='/etc/default'

    export USE_NFTABLES='YES'
    export NFTABLES_CONF='/etc/nftables.conf'
    export FIREWALL_RULE_CONF="${NFTABLES_CONF}"

    # Directory used to store SSL/TLS key/cert file.
    export SSL_FILE_DIR="/etc/ssl"

    # `python3` is a symbol link to `python3X`.
    export UWSGI_PY3_PLUGIN_NAME='python3'



# Cache clear scirpt file names.
export BUFFER_CACHE_CLEAR='clearcache.sh'


# Shells
export SHELL_NOLOGIN='/sbin/nologin'
export SHELL_BASH='/bin/bash'

# Crontab related.
export CRON_SPOOL_DIR='/var/spool/cron/crontabs'

# Root's cron file
export CRON_FILE_ROOT="${CRON_SPOOL_DIR}/${SYS_USER_ROOT}"

# Location of sshd_config
export SSHD_CONFIG='/etc/ssh/sshd_config'

if [[ -f ${SSHD_CONFIG} ]]; then
    export SSHD_PORT="$(awk '/^Port/ {print $2}' ${SSHD_CONFIG} | head -1)"
    export SSHD_PORT2="$(awk '/^Port/ {print $2}' ${SSHD_CONFIG} | tail -1)"
fi

if [ X"${SSHD_PORT}" == X'' ]; then
    # No port number defined, use default port number (22).
    export SSHD_PORT='22'
    export SSHD_PORT2='22'
fi

export SSHD_PORTS_WITH_COMMA="${SSHD_PORT}"
export SSHD_PORTS_WITH_SPACE="${SSHD_PORT}"

if [ X"${SSHD_PORT}" != X'' -a X"${SSHD_PORT2}" != X'' -a X"${SSHD_PORT}" != X"${SSHD_PORT2}" ]; then
    export SSHD_PORTS_WITH_COMMA="${SSHD_PORT},${SSHD_PORT2}"
    export SSHD_PORTS_WITH_SPACE="${SSHD_PORT} ${SSHD_PORT2}"
fi

# sysctl.conf
export SYSCTL_CONF='/etc/sysctl.conf'

# Backup script file names.
export BACKUP_SCRIPT_MONGO_NAME='backup_mongo.sh'
